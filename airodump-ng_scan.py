import subprocess
import time
import csv

class AirodumpScanner:
    def __init__(self, interface):
        self.interface = interface
        self.process = None
        self.output_file = "/tmp/airodump_output" # Temporary file for airodump-ng output

    def start_scan(self):
        # Ensure interface is in monitor mode before starting airodump-ng
        # (You'd call set_monitor_mode from alfa_handler here)

        # Start airodump-ng to write to a CSV file
        command = ['sudo', 'airodump-ng', '--output-format', 'csv', '--write', self.output_file, self.interface]
        print(f"Starting Airodump-ng: {' '.join(command)}")
        self.process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
        # Airodump-ng runs indefinitely, so we won't wait for it to finish here.
        # We'll poll its output file.

    def stop_scan(self):
        if self.process:
            self.process.terminate()
            self.process.wait()
            print("Airodump-ng scan stopped.")

    def get_scan_results(self):
        # Parse the CSV file generated by airodump-ng
        results = []
        try:
            # Give airodump-ng some time to write the file initially
            time.sleep(2)
            with open(f"{self.output_file}-01.csv", 'r', encoding='utf-8', errors='ignore') as f:
                reader = csv.reader(f)
                ap_section = False
                for row in reader:
                    if not row:
                        continue
                    if row[0].strip() == 'BSSID': # Start of APs section
                        ap_section = True
                        continue
                    if ap_section and row[0].strip() and row[0].strip() != 'Station MAC': # Skip empty rows and station section
                        try:
                            # Example parsing (adjust indices based on actual airodump-ng CSV format)
                            # BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, #beacons, #data, #/s, GPS latitude, GPS longitude, Altitude, Fixed, ESSID, Key
                            bssid = row[0].strip()
                            channel = row[3].strip()
                            privacy = row[5].strip()
                            essid = row[13].strip() if len(row) > 13 else "[Hidden]"
                            results.append({
                                'BSSID': bssid,
                                'Channel': channel,
                                'Privacy': privacy,
                                'ESSID': essid
                            })
                        except IndexError:
                            print(f"Skipping malformed row: {row}")
                            continue
        except FileNotFoundError:
            print(f"Airodump-ng output file not found: {self.output_file}-01.csv. Scan might not have started yet.")
        return results

# Beispiel im GUI-Thread (oder einem separaten Thread, um die GUI nicht zu blockieren)
# scanner = AirodumpScanner(interface='wlan0mon') # Assuming wlan0mon is your monitor interface
# scanner.start_scan()
# while True:
#     aps = scanner.get_scan_results()
#     # Update GUI table with 'aps'
#     print("Found APs:", aps)
#     time.sleep(5)
#     # Add a mechanism to stop the scan (e.g., via a button click)
# # scanner.stop_scan()
